# Chunk 1: setup
knitr::opts_chunk$set(fig.align="center", fig.height=4.5, fig.width=8, collapse=T, comment="", prompt=F, echo = T, cache=T, autodep=T, tidy=T, tidy.opts=list(width.cutoff=63), dev='png')
options(width=63)
# Chunk 2
# Loads data set
load("/Users/billhaarlow/Desktop/SML201/Projects/Project3/oct_poll.rdata")
# Chunk 3
# Creates `poll.oct2016` and aggregates the appropriate data
poll.oct2016 = data.frame(state = unique(oct_poll$state),
samplesize = as.vector(tapply(X = oct_poll$samplesize, INDEX = oct_poll$state, FUN = sum)),
rawpoll_clinton = as.vector(tapply(X = (oct_poll$rawpoll_clinton/100*oct_poll$samplesize), INDEX = oct_poll$state, FUN = sum))/as.vector(tapply(X = oct_poll$samplesize, INDEX = oct_poll$state, FUN = sum)),
rawpoll_trump = as.vector(tapply(X = (oct_poll$rawpoll_trump/100*oct_poll$samplesize), INDEX = oct_poll$state, FUN = sum))/as.vector(tapply(X = oct_poll$samplesize, INDEX = oct_poll$state, FUN = sum)))
str(poll.oct2016)
# Chunk 4
library(dplyr)
# Reads the .csv file and creates `true.perc`
true.perc = read.csv('/Users/billhaarlow/Desktop/SML201/Projects/Project3/2016_election_result_csv.csv')
# Merges the data frames into one
merged.data = merge(x = poll.oct2016, y = true.perc, by.x = "state", by.y = "state")
# Mutates the data frame
election = mutate(merged.data, poll.diff = rawpoll_trump - rawpoll_clinton, vote.diff = trump.vote - clinton.vote, deviation = poll.diff - vote.diff)
str(election)
dim(election)
# Chunk 5
# Creates sample using `mapply`
clinton = with(election,
mapply(rep, -1, as.vector(tapply(X = rawpoll_clinton*samplesize, INDEX = state, FUN = mean)))
)
trump = with(election,
mapply(rep, 1, as.vector(tapply(X = rawpoll_trump*samplesize, INDEX = state, FUN = mean)))
)
other = with(election,
mapply(rep, 0, as.vector(tapply(X = (1-rawpoll_clinton-rawpoll_trump)*samplesize, INDEX = state, FUN = mean)))
)
# Outputs the individual SE for each state
sd.func = function(x){
z = sd(c(clinton[[x]], trump[[x]], other[[x]]))/sqrt(election[x, 2])
return(z)
}
se = as.numeric(lapply(X = c(1:51), FUN = sd.func))
# Creates std.unit
std.unit = (election$poll.diff - election$vote.diff)/se
std.unit
# Chunk 6
# Creates same.sign
pos = as.numeric(election$poll.diff > 0) + as.numeric(election$vote.diff > 0)
both.pos = as.numeric(pos == 2)
neg = as.numeric(election$poll.diff < 0) + as.numeric(election$vote.diff < 0)
both.neg = as.numeric(neg == 2)
same.sign = (both.pos == 1) | (both.neg == 1)
same.sign
# Chunk 7
# Creates significant
m = matrix(c(election$poll.diff-qnorm(p = .975)*se, election$poll.diff+qnorm(p = .975)*se), nrow = 51, ncol = 2)
significant = as.logical(m[,1]>0 | m[,2]<0)
significant
# Chunk 8
# Mutates `election` to add the new data
election = mutate(election, "std.unit" = std.unit, "same.sign" = same.sign, "significant" = significant)
str(election)
# Chunk 9
# Outputs the relevant number
sum(election$significant == TRUE)
# Chunk 10
# Outputs the relevant number
sum(election$significant == TRUE & election$same.sign == TRUE)
# Chunk 11
# Outputs the relevant number
sum(election$significant == FALSE)
# Outputs the relevant number
sum(election$significant == FALSE & election$same.sign == TRUE)
election$significant == FALSE & election$same.sign == TRUE
election$significant == FALSE
election$same.sign == TRUE
sum(significant)
sum(same.sign)
election$poll.diff*election$vote.diff>0
sum(election$poll.diff*election$vote.diff>0)
str(true.perc)
head(true.perc)
election
head(election)
unique(oct_poll$state)
sort(unique(oct_poll$state))
