prop.Emily = sort(Emily_87_17$prop, decreasing = T)
max.Emily = females_87_17[females_87_17$prop==prop.Emily,]
max.Emily
years_87_17 = babynames$year %in% c(1987:2017)
data_87_17 = babynames[years_87_17,]
female_baby = data_87_17$sex=="F"
females_87_17 = data_87_17[female_baby,]
Emily_87_17 = females_87_17[females_87_17$name=="Emily",]
prop.Emily = sort(Emily_87_17$prop, decreasing = T)
max.Emily = females_87_17[Emily_87_17$prop==prop.Emily,]
max.Emily
years_87_17 = babynames$year %in% c(1987:2017)
data_87_17 = babynames[years_87_17,]
female_baby = data_87_17$sex=="F"
females_87_17 = data_87_17[female_baby,]
Emily_87_17 = females_87_17[females_87_17$name=="Emily",]
prop.Emily = sort(Emily_87_17$prop, decreasing = T)
max.Emily = Emily_87_17[Emily_87_17$prop==prop.Emily,]
max.Emily
years_87_17 = babynames$year %in% c(1987:2017)
data_87_17 = babynames[years_87_17,]
female_baby = data_87_17$sex=="F"
females_87_17 = data_87_17[female_baby,]
Emily_87_17 = females_87_17[females_87_17$name=="Emily",]
prop.Emily = sort(Emily_87_17$prop, decreasing = T)
max.Emily = Emily_87_17[Emily_87_17$prop==prop.Emily]
max.Emily
years_87_17 = babynames$year %in% c(1987:2017)
data_87_17 = babynames[years_87_17,]
female_baby = data_87_17$sex=="F"
females_87_17 = data_87_17[female_baby,]
Emily_87_17 = females_87_17[females_87_17$name=="Emily",]
plot(Emily_87_17$year, Emily_87_17$prop)
install.packages("dplyr")
# Chunk 1: setup
knitr::opts_chunk$set(fig.align="center", fig.height=5, fig.width=9, collapse=FALSE, comment="", prompt=T, echo = TRUE, cache=TRUE, autodep=TRUE, tidy=TRUE, tidy.opts=list(width.cutoff=60))
options(width=70)
# Chunk 2
getwd() # check where the current work directory is
setwd("/Users/billhaarlow/Desktop/SML201/")
# use setwd() to change your directory;
# when you save outputs all your outputs
# will be automatically saved to your current
# directory unless you specify a path for
# your outputs (see example below)
getwd()
# verify that your current work directory has been
# changed to where you wanted
# Chunk 3
# setwd('/Users/daisyhuang/Documents/Teaching/SML201_Fall2019/Lectures/EDA/EDA_part_I')
# you can ignore this line; I just want to set my
# work directory back to the original one since
# I want to save all my outputs in that folder
getwd()
# verify directory
# Chunk 4
ls() # check what R objects are currently in your workspace
rm(list=ls()) # remove all the R objects in your workspace
x = c(3,1,4) # create a variable x that stores the vector c(3,1,4)
y = 1:2
rm(x) # remove just x from the workspace
x = c(3,1,4)
y = 1:2
rm(list=c('x', 'y')) # remove x and y from the workspace
x = c(3,1,4)
y = 1:2
rm(list=ls())
# remove all R objects in your workspace
# same as rm(list=c('x', 'y')) since x and y are the only R objects in your workspace
# Chunk 7
seq()
# Chunk 8
x = c(3,1,4)
y = 1:2
save("x", "y", file="xy.RData") # save x, y variables to xy.RData
# xy.RData will be saved to current work directory
save("x", "y", file="/Users/billhaarlow/Desktop/SML201/xy.RData")
# can also specify a full path to tell R where to save variable x and y
rm(list=c('x', 'y'))
# remove x and y from the workspace to see if save() works
ls()
load(file = "xy.RData") # load x, y back
ls() # check if we get x and y back
x
y
rm(list=ls())
# Chunk 9
t.ship = read.csv(file = '/Users/billhaarlow/Desktop/SML201/titanic.csv')
# Chunk 10
class(t.ship) # this tells me what kind of R object this dataset is
dim(t.ship) # 891 rows by 12 columns
# Chunk 11
head(t.ship) # look at the first 6 (by default) rows of an object
# Chunk 12
tail(t.ship, n=3) # look at the last 3 rows of an object
# Chunk 13
# check the data type of each column in `t.ship`
str(t.ship, strict.width = 'cut')
# Chunk 14
# get the 5-number summary and the mean for each column of the data frame
summary(t.ship)
# Chunk 16
hist(t.ship$Age, breaks = 30, freq = F,
main = 'Age Distribution for Passengers on Titanic',
xlab = 'Age (in Years)', ylab = 'Proportion per Year', border = rgb(0, 1, 0), col = rgb(1, 0, 1))
# we will talk about how to construct
# histograms in more details in precept
# Chunk 17
set.seed(2346)
unif4000 = runif(n=10000, min=-sqrt(12)/2, max=sqrt(12)/2)
mean(unif4000)
var(unif4000)
rnorm4000 = rnorm(n=10000, mean=0, sd = 1)
mean(rnorm4000)
sd(rnorm4000)
exp4000 = rexp(n=10000, rate=1)-1
mean(exp4000)
sd(exp4000)
# Chunk 18
par(mfrow=c(3,1), cex.main=.8, cex.lab=.8, cex.axis=.8)
hist(unif4000, prob=T, main='Histogram of a Dataset with Mean about 0 and SD about 1', xlab='data points', xlim=c(-6, 6))
hist(rnorm4000, prob=T, main='Histogram of a Dataset with Mean about 0 and SD about 1', xlab='data points', xlim=c(-6, 6))
hist(exp4000, prob=T, main='Histogram of a Dataset with Mean about 0 and SD about 1', xlab='data points', xlim=c(-6, 6))
par(mfrow=c(1,1))
# Chunk 19
knitr::kable(
round(
rbind(
summary(unif4000),
summary(rnorm4000),
summary(exp4000)
), digits = 2)
)
# Chunk 20
mean(t.ship$Age) # you get NA because R
# does not know how you would like to
# handle the missing values
summary(t.ship$Age)
# the vector `Age` has 177 missing values
# we need to keep in mind that since the
# number of missing values is not small
# this might affect the accuracy of our
# analysis
# Chunk 21
mean(t.ship$Age, na.rm = T)
sd(t.ship$Age, na.rm = T)
var(t.ship$Age, na.rm = T)
# Chunk 22
summary(t.ship$Age)[-4]
# Chunk 23
# calculate the median
median(t.ship$Age, na.rm = T)
# Chunk 24
## first way: calculate each quantile separately first
## then, take the difference
quantile(t.ship$Age, na.rm = T, p = .75) # .75 quantile
quantile(t.ship$Age, na.rm = T, p = .25) # .25 quantile
quantile(t.ship$Age, na.rm = T, p=.75)-quantile(t.ship$Age, na.rm = T, p=.25)
## you can use this method to calculate the difference between
## any two quantiles, not just the 1st and the 3rd quartiles
# Chunk 25
# alternatively, we can output the values of the two quantiles
# as elements in a vector and then take the difference
# of the two quantiles
diff(quantile(t.ship$Age, na.rm = T, p=c(.25, .75)))
# Chunk 26
# lastly, we can also calculate this with
# the `IQR()` function
IQR(t.ship$Age, na.rm = T)
# Chunk 27
summary(t.ship$Age)
# Chunk 28
summary(t.ship$Age)
# Chunk 29
summary(t.ship$Age)
# Chunk 30
quantile(t.ship$Age, p = .675, na.rm = T)
# Chunk 31
hist(t.ship$Fare, freq = F, xlab = "Ticket prices (in pounds)",
main = 'Histogram for Titanic Ticket Prices', breaks = 30)
# Chunk 32
max(t.ship$Fare) # some tickets seem to be a lot more expensive than the rest
# Chunk 33
t.ship[t.ship$Fare == max(t.ship$Fare),]
# Note: t.ship$Fare == max(t.ship$Fare) is
# a condition and will return a TRUE-FALSE
# vector (i.e., a logical vector)
# you can extract out elements of a vector
# by using a logical vector that has
# the same length; e.g.,
c(3, 8, 1, 9)[c(T, F, F, T)]
# Chunk 34
# create a small data frame for the demonstration
toy.ex = t.ship[1:6, 1:3]
toy.ex
# Chunk 35
# I just want to extract out rows 1, 2, 6:
toy.ex[c(T, T, F, F, F, T) , ]
# Chunk 36
# you can also combine the conditions with
# & (and), | (or) or ! (not); e.g.,
c(3, 8, 1, 9)[c(T, F, F, T) & c(T, F, T, F)]
c(3, 8, 1, 9)[c(T, F, F, T) | c(T, F, T, F)]
c(3, 8, 1, 9)[!(c(T, F, F, T) & c(T, F, T, F))]
# Chunk 37
sort(t.ship$Fare, decreasing = T)
# by default `decreasing` is set to `FALSE`
# so sort() sorts the elements
# in a vector in an increasing order;
# the default setting in sort() also
# removes the missing values in sort()
# Chunk 38
head(sort(t.ship$Fare, decreasing = T), n=20)
# Chunk 39
# if we just want to sort the prices
# in an increasing order we don't need
# to include the argument `decreasing`
head(sort(t.ship$Fare), n=20)
# Chunk 40
boxplot(t.ship$Fare, main='Boxplot for Passenger Fare',
ylab = 'Passenger Fare (in Pounds)')
# Chunk 41
sum(t.ship$Age >=20 & t.ship$Age <=22, na.rm = T)
# Chunk 42
range(t.ship$Fare)
# Chunk 43
sort(t.ship$Age)[1:20]
# sort() sorts the elements in a vector
# in increasing order (by default);
# the default setting in sort() also
# removes the missing values in sort()
# Chunk 44
sort(t.ship$Age)[1:4]
# Chunk 45
# use non-NA data only:
age.data = na.omit(t.ship$Age)
# Chunk 49
7:11 # integer
class(7:11)
# class() tells you the object type of the input argument
# However, when the input argument is a vector class()
# will tell you a bit more: it will tell you the data
# type of the elements in the vector--note that all the
# elements in a vector always have the same data type.
# Chunk 50
c(3.4, 9.7, 14.2, 1.5)
class(c(3.4, 9.7, 14.2, 1.5))
# Chunk 51
c(T, T, F) # create a logical vector
# You can also use TRUE/FALSE instead of T/F
class(c(T, T, F))
(3:7)>4 # returns a vector of logical elements
class((3:7)>4)
!((3:7)>4) # negation operator; i.e., "not"
# Chunk 52
y = c('a', 'bc', 'def')
length(y) # length of vector
nchar(y) # number of characters of each element
# Chunk 53
?factor
factor(c("yes", "yes", "no", "yes", "no"))
factor(c("yes", "yes", "no", "yes", "no"),  levels = c("yes", "no"))
# Chunk 54
##### For vectors
how.happy = c(miserable = -2, low = -1, all.right = 0,
cheerful = 1, ecstatic = 2)
names(how.happy)
# another way to construct this vector
how.happy = (-2):2
names(how.happy) = c("miserable", "low", "all.right",
"cheerful", "ecstatic")
# need to have quotation marks because the entries are characters
# R starts indexing with 1 and use "[]" for indices
## Five ways to extract elements of a vector
# Way 1
how.happy[c(2, 4, 5)] # Inclusion by position
# Way 2
how.happy[-c(1,3)] # Exclusion by position
# Way 3
how.happy[c("low", "cheerful", "ecstatic")] # By name
# Way 4
how.happy[how.happy >= 1] # By logical index
how.happy[c(F, F, F, T, T)] # same as above
# note that the logical vector in '[]' needs
# to have the same length as how.happy
# Way 5
how.happy[] # No index (include everything)
# This is useful when I want to reassign
# values to x--see below
# Chunk 55
## The same indexing method can be used to assign values
## to elements of a vector.
# Way 1
how.happy[c(2, 4, 5)] = c(-10, 10, 20) # Inclusion by position
# Way 2
how.happy[-c(2, 4, 5)] = c(-20, 0) # Exclusion by position
how.happy
# Way 3
how.happy[c('low',  'all.right',  'cheerful')] = c(-200, 0, 200) # By name
how.happy
# Way 4
how.happy[how.happy > 10] = c(2000, 4000) # By logical index
how.happy
how.happy[c(F, F, F, T, T)] = c(2000, 4000) # same as above
# note that the logical vector in '[]' needs
# to have the same length as how.happy
# Way 5
how.happy[] = 5 # No index (include everything)
# This is useful when I want to reassign values to x
# Note: this is different from
how.happy = 5
# Chunk 56
x = 60:67; y = 100:105
x
y
c(x, y)
# Chunk 57
class(c("a", "q"))
class(c(F))
c("a", "q", F)
class(c("a", "q", F))
# R does implicit coercion to change the data
# type for the vector to whatever that makes sense
c(T, 4.5, F)
class(c(T, 4.5, F)) # R codes 'T=1' and 'F=0'
# Chunk 58
head(iris)
# Chunk 59
d = data.frame(let = c('a', 'p'), val = 1:2,
t = c(7.6, 5.1))
d
names(d)  # names of the elements of a data frame
colnames(d) # Remember that this also works for a matrix
# Chunk 60
class(d[, 2]) # a vector
# Chunk 61
class(d$val) # a vector
class(d[[2]]) # a vector
# Chunk 62
class(d[2]) # still a data frame, not a column
# Note that it makes sense to do this
class(d[2:3]) # this means to extract out the 2nd and 3rd columns
# but not this
# class(d[[2:3]])
# see details here (https://cran.r-project.org/doc/manuals/R-lang.html#Indexing)
# Chunk 63
# create another data frame to combine with d
d2 = data.frame(let2 = c('k', 'j'), val2 = 8:7)
d2
# combine two data frames
data.frame(d, d2)
class(data.frame(d, d2)) # result is another data frame
# Chunk 64
x = 1:4
x*5
x^2
y = 0:3
x+y
sum(x, y) # different from x + y
sum(x) + sum(y)  # same as sum(x, y)
prod(x) # Returns the product of all the values present in its argument
diff(x)
diff(c(8, 2))
# Chunk 65
x = 1:5
y = 0:2
x+y
# Chunk 66
# To find out the object type for any R objects
class(iris) # iris is a built-in dataset in R
# For a matrix, an array or a data frame
dim(iris)
# See the top or bottom part of an object
head(iris, n=3)
tail(iris, n=2)
# For a vector or a list
length(iris$Sepal.Length)
length(iris) # Recall that a data.frame is just a special type of list
# For a matrix or a data frame
ncol(iris) # same as dim(iris)[2]
nrow(iris) # same as dim(iris)[1]
# To find out the data type for each element in any R object
str(iris)
# Chunk 67
x = c(3, 9, 1, -1, 12, -1, 5, -1)
sum(x)/length(x)
mean(x) # this takes average of the elements in x
min(x) # the minimum of the elements in x
max(x) # the maximum of the elements in x
range(x) # range returns the minimum and the maximum of x
c(min(x), max(x)) # same result as range(x)
# To index by value
which.max(x) # the index of the element that equals the max of x
which.min(x)
# note that this gives you only the index of the first element
# that equals the min of x
which(x==min(x))
# this will return all indices of the elements that equals the min of x
# Chunk 68
x = c(3, 9, 1, -1, 12, -1, 5, -1)
x
sort(x)
x # Note that sort() does not change x
sort(x, decreasing =T)
# Chunk 69
# To see why sort() is useful
pop.in.mi = c(19.75, 9, 12.78)
# population size in millions
names(pop.in.mi) = c('NY', 'NJ', 'PA')
pop.in.mi
sort(pop.in.mi)
# see the smallest and biggest states among the three
# Chunk 70
pop.in.mi
rank(pop.in.mi)
rank(-pop.in.mi) # rank in decreasing order
# Chunk 71
x
unique(x)
sort(unique(x))
# unique also works on objects of character type
# Chunk 72
# create a matrix for the example
m.with.duplicate.rows = matrix(c(rep(1:3, 3), 4:6), ncol = 3, byrow = T)
m.with.duplicate.rows
# `unique()` removes duplicate rows.
unique(m.with.duplicate.rows)
# Chunk 73
# order() returns a list of indices that you can use to sort
# the input vector in a decreasing or increasing order
# create vectors for this example
v = c(8, 9, 2, 1, -1)
v2 = 1:5
# create a matrix for this example
tmp.m = cbind(v, v2)
tmp.m
# I now want to rearrange the rows according to the values in v
sort(v) # the sorted v (in an increasing order) looks like this
# order(v) will give me the indices that I need to rearrange the
# elements in v in an increasing order
v[order(v)] # same result as sort(v)
# I can use such indices to rearrange the rows of tmp.m so that
# the rows are arranged according to the values in the
# first column of the matrix
tmp.m[order(v),]
# Similarly, if we want to do this in a decreasing order:
tmp.m[order(-v),]
# Chunk 74
x
c(3, 4, 5) %in% x
# This returns a vector of the same length as c(3, 4, 5)
# each element in the resulting vector is T if that
# element is in x, F otherwise
x %in% c(3, 4, 5)
# different from the result for `c(3, 4, 5) %in% x`
how.happy
how.happy[4:5]
how.happy = c(miserable = -2, low = -1, all.right = 0,
cheerful = 1, ecstatic = 2)
names(how.happy)
how.happy
how.happy[how.happy >= 0]
# [row index, col index]
toy[c(1,3),]
load(how.happy = c(miserable = -2, low = -1, all.right = 0,
cheerful = 1, ecstatic = 2)
names
load(t.ship)
t.ship
# create a small data frame for the demonstration
toy = t.ship[1:6, 1:3]
toy
# I just want to extract out rows 1, 2, 6:
toy[c(T, T, F, F, F, T) , ]
toy$Pclass
t.ship =
read.csv(file =
'/Users/billhaarlow/Desktop/SML201/titanic.csv')
table(t.ship$Survived)
table(t.ship$Survived,t.ship$Pclass)
table(t.ship$Pclass, t.ship$Survived)/as.vector(table(t.ship$Pclass))
tapply(X = t.ship$Survived, INDEX = t.ship$Pclass, FUN = mean)
grp = factor(rep(c("Control", "Treatment"), each = 4))
grp
effect = rnorm(8)
effect
mean(effect)
tapply(X=effect, INDEX=grp, FUN=mean)
mean(effect[1:4])
head(babynames)
library(babynames)
head(babynames)
tapply(X = t.ship$Survived, INDEX = t.ship$Pclass, FUN = mean)
sex = factor(rep(c("Female", "Male"), times = 4))
sex
tapply(effect, INDEX = list(grp, sex), FUN = mean)
effect.with.NAs = effect
effect.with.NAs[c(2, 5)] = NA
effect.with.NAs
tapply(effect.with.NAs, INDEX = grp, FUN = mean, na.rm = T)
table(grp)
class(table(grp))
grp.table = table(grp)
class(grp.table)
as.vector(grp.table)
v.grp.table = as.vector(grp.table)
names(v.grp.table) = names(grp.table)
v.grp.table
TakeSqRoot = function(x){return(x^2)}
TakeSqRoot(5)
Square = function(x){return(x^2)}
Square(5)
