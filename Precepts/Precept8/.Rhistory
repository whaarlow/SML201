library(ggplot2)
pnorm(480, mean = 536, sd = 102)
# Note that if X ~ Normal(mean = 536, sd = 102), P(X = 480) = 0.
pnorm(479.5, mean = 536, sd = 102)
pnorm(480, mean = 536, sd = 102) - pnorm(479.5, mean = 536, sd = 102)
1 - pnorm(536, mean = 536, sd = 102)
mean(pop)
sd(pop)
# Chunk 1: setup
knitr::opts_chunk$set(fig.align="center", fig.height=4, fig.width=6, collapse=TRUE, comment=NA, prompt=FALSE, echo = TRUE, cache=TRUE, autodep=TRUE, tidy.opts=list(width.cutoff=63),tidy=TRUE)
options(width=63)
# Chunk 2
library(ggplot2)
# Chunk 3
pnorm(480, mean = 536, sd = 102)
# Note that if X ~ Normal(mean = 536, sd = 102), P(X = 480) = 0.
# Chunk 4
pnorm(479.5, mean = 536, sd = 102)
# Chunk 5
pnorm(480, mean = 536, sd = 102) - pnorm(479.5, mean = 536, sd = 102)
# Chunk 6
1 - pnorm(536, mean = 536, sd = 102)
# Chunk 7
pnorm(670, mean = 536, sd = 102) - pnorm(530, mean = 536, sd = 102)
# Chunk 8
pnorm(400, mean = 536, sd = 102) + (1 - pnorm(700, mean = 536, sd = 102))
# Chunk 9
# Data in population
pop = c(1,1,1,2,2,3)
# Chunk 10
# Make a function that generates 10000 samples
generator = function(pop, sample.size){
return(sapply(1:10000,
FUN=function(x){mean(
sample(pop, size=sample.size, replace=T)
)}
)
)
}
# Demo for CLT
par(mfrow=c(4,1))
hist(pop, freq = F, breaks=c(0.5,1.5,2.5,3.5), xlim = c(0.5, 3.5),
main = 'Population distribution')
X=generator(pop,10)
hist(X,main='Sample mean distribution; sample size=10',
xlim = c(0.5, 3.5),
xlab = 'sample means', freq = F)
X=generator(pop,100)
hist(X,main='Sample mean distribution; sample size=100',
xlim = c(0.5, 3.5),
xlab = 'sample means', freq = F)
X=generator(pop,1000)
hist(X,main='Sample mean distribution; sample size=1000',
xlim = c(0.5, 3.5),
xlab = 'sample means', freq = F)
# Demo for LLN
par(mfrow=c(4,1), mar=c(2, 2, 2, 2))
hist(pop, freq = F, breaks=c(0.5,1.5,2.5,3.5), main = 'Population distribution')
Y=sample(pop,size=10,replace=T)
hist(Y,breaks=c(0.5,1.5,2.5,3.5), freq=F,
main = 'sample size = 10 for one sample', xlab = 'data points in the sample')
Y=sample(pop,size=100,replace=T)
hist(Y,breaks=c(0.5,1.5,2.5,3.5), freq=F,
main = 'sample size = 100 for one sample', xlab = 'data points in the sample')
Y=sample(pop,size=1000,replace=T)
hist(Y,breaks=c(0.5,1.5,2.5,3.5), freq=F,
main = 'sample size = 1000 for one sample', xlab = 'data points in the sample')
# Chunk 11
# LIZARD LENGTH DATA in cm
lizard = c(6.2, 6.6, 7.1, 7.4, 7.6, 7.9, 8, 8.3, 8.4, 8.5, 8.6, 8.8, 8.8, 9.1, 9.2, 9.4, 9.4, 9.7, 9.9, 10.2, 10.4, 10.8, 11.3, 11.9)
# Chunk 12
# Look at the histogram
hist(lizard, breaks = 20, freq = F, xlab = "Lizard size (cm)",
main = 'Lizard size for 24 Lizards in cm',
ylab = 'Proportion per cm')
lines(density(lizard), lty = 2) # This adds a line estimating
# the distribution of Lizard data; lty = 2 give a dashed line
xseq = seq(from = min(lizard)*.9, to = max(lizard)*1.1, length = 50)
lines(x = xseq, y = dnorm(x=xseq, mean = mean(lizard), sd = sd(lizard)), col = 'blue')
# This adds a Normal density with mean and SD with the same values as the mean and SD of the Lizard dataset
legend(x = 10, y= .3,
legend = c('Density estimate \nfor Lizard data', 'Normal density'),
lty = c(2, 1), col = c('black', 'blue'), cex = .6)
# Chunk 13
# Compare to the quantiles of Normal(0,1) distribution
qqnorm(y = lizard, main = "Normal Q-Q Plot for Lizard",
xlab = "Normal ", ylab = "Sample Quantiles",
cex.lab = 0.8, cex.main = 0.8)
qqline(y = lizard, col = "red")
# Chunk 14
# Set the degree of confidence for the interval
p = .90
my.q = qt(p+(1-p)/2, df=length(lizard)-1) # do not use `q`
# as your variable name; q() is a function to terminate
# your R session; see `?q` or `?quit`
lizard.se = sd(lizard)/sqrt(length(lizard))
# a p*100-percent confidence Interval for the average length of the lizards is
mean(lizard) + c(-1, 1) * my.q * lizard.se
# Can also do everything in one line
mean(lizard) + c(-1, 1) * qt(p+(1-p)/2, df=length(lizard)-1) * sd(lizard)/sqrt(length(lizard))
mean(pop)
sd(pop)
set.seed(4321)
sampl.60 = sample(pop, size = 60, replace = T)
mean(sampl.60)
sd(sampl.60)
p = 0.8
my.q = qt(p + (1 - p)/2, df = length(sampl.60) - 1)
my.se = sd(sampl.60)/sqrt(length(sampl.60))
my.q
my.se
p = 0.8
my.q = qt(p + (1 - p)/2, df = length(sampl.60) - 1)
my.se = sd(sampl.60)/sqrt(length(sampl.60))
mean(sampl.60) + c(-1, 1) * my.q * my.se
set.seed(4321)
sampl.6000 = sample(pop, size = 6000, replace = T)
mean(sampl.6000)
sd(sampl.6000)
p = 0.8
my.q = qt(p + (1 - p)/2, df = length(sampl.6000) - 1)
my.se = sd(sampl.6000)/sqrt(length(sampl.6000))
mean(sampl.6000) + c(-1, 1) * my.q * my.se
(1.856044 - 1.610622)/( 1.675772 - 1.651228)
sqrt(.40*(1-.4))*sqrt(100/(100-1))
test.sampl = rep(0:1, times = c(60, 40))
sd(test.sampl)
p=.95
my.sd = sqrt(.95(1-.95))*sqrt(1000/(1000-1))
my.q = qt(p + (1 - p)/2, df = 1000 - 1)
my.se = my.sd/sqrt(1000)
.25 + c(-1, 1) * my.q * my.se
p=.95
my.sd = sqrt(.95(1-.95))*sqrt(1000/(1000-1))
my.q = qt(p + (1 - p)/2, df = 1000 - 1)
my.se = my.sd/sqrt(1000)
.25+c(-1, 1)*my.q*my.se
p=.95
my.sd = sqrt(.25(1-.25))*sqrt(1000/(1000-1))
my.q = qt(p + (1 - p)/2, df = 1000 - 1)
my.se = my.sd/sqrt(1000)
.25+c(-1, 1)*my.q*my.se
p=.95
my.sd = sqrt(.25/(1-.25))*sqrt(1000/(1000-1))
my.q = qt(p + (1 - p)/2, df = 1000 - 1)
my.se = my.sd/sqrt(1000)
.25+c(-1, 1)*my.q*my.se
p=.95
my.sd = sqrt(.25*(1-.25))*sqrt(1000/(1000-1))
my.q = qt(p + (1 - p)/2, df = 1000 - 1)
my.se = my.sd/sqrt(1000)
.25+c(-1, 1)*my.q*my.se
